<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
require APPPATH . '/libraries/REST_Controller.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Pos extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();

        $this->load->library("Aauth");
		$this->load->model('pos_model');
        $this->load->model('event_model');
        $this->load->model('app_model');
        $this->load->model('financial_model');
        $this->load->model('user_model');
        $this->load->model('task_model');
    }

	public function get_poses_post()
    {

        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $this->app_model->save_raw_data(json_encode($requestjson));

        if (isset($requestjson['token']) && !empty($requestjson['token'] && $requestjson['token']) != ''){

            $this->load->model('user_model');
            $this->load->model('customer_model');
            $this->load->model('trader_model');

            $trader_id = false;
            $user_id = false;
            //this is here for when a trader completes a task on behalf of a store.
            if (isset($requestjson['store_id']) && !empty($requestjson['store_id'] && $requestjson['store_id']) != ''){
                $user = $this->customer_model->get_user_from_customer_id($requestjson['store_id']);
                $user_id = $user['id'];
                $trader_user_id = $this->user_model->get_user_from_token($requestjson['token']);
                $trader_id = $this->trader_model->get_trader_from_user_id($trader_user_id);
            }else{
                $user_id = $this->user_model->get_user_from_token($requestjson['token']);
            }

            if($user_id){

				$data['poses'] = $this->pos_model->get_active_poses();
				if ($data['poses']==null)
				{
					$message = [
					'success' => false,
					'message' => 'No poses found.'
					];
				}
				else
				{
					$message = [
					'success' => true,
					'message' => 'Request processed successfully.',
					'poses' => $data['poses']
					];
				}

            }else{
                $message = [
                    'success' => false, // Automatically generated by the model
                    'data' => array(),
                    'message' => 'Your token does not appear to be valid'
                ];
            }
        }else{
            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => 'Please supply a valid token'
            ];
        }
	$this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
  }
  
    public function get_pos_post()
    {

        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $this->app_model->save_raw_data(json_encode($requestjson));
        $task_id = 0;

        if(isset($requestjson['task_id'])){
            $task_id = $requestjson['task_id'];
        }

        if (isset($requestjson['token']) && !empty($requestjson['token'] && $requestjson['token']) != ''){

            $this->load->model('user_model');
            $this->load->model('customer_model');
            $this->load->model('trader_model');

            $trader_id = false;
            $user_id = false;
            //this is here for when a trader completes a task on behalf of a store.
            if (isset($requestjson['store_id']) && !empty($requestjson['store_id'] && $requestjson['store_id']) != ''){
                $user = $this->customer_model->get_user_from_customer_id($requestjson['store_id']);
                $user_id = $user['id'];
                $trader_user_id = $this->user_model->get_user_from_token($requestjson['token']);
                $trader_id = $this->trader_model->get_trader_from_user_id($trader_user_id);
            }else{
                $user_id = $this->user_model->get_user_from_token($requestjson['token']);
            }

            if($user_id){

                $data['pos'] = $this->pos_model->get_active_pos($requestjson['pos_id']);
                if ($data['pos']==null)
                {
                    $message = [
                    'success' => false,
                    'message' => 'No poses match the id you supplied.'
                    ];
                }
                else
                {
                    $this->task_model->change_task_status('pos', $requestjson['pos_id'], $user_id, 2, $task_id); // Viewed
                    $message = [
                    'success' => true,
                    'message' => 'Request processed successfully.',
                    'pos' => $data['pos']
                    ];
                }

            }else{
                $message = [
                    'success' => false, // Automatically generated by the model
                    'data' => array(),
                    'message' => 'Your token does not appear to be valid'
                ];
            }
        }else{
            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => 'Please supply a valid token'
            ];
        }
    $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
  }

    public function push_pos_post()
    {

        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);
        $nopicture = $requestjson;
        $nopicture['photo'] = 'removed for space reasons';
        $this->app_model->save_raw_data(json_encode($nopicture));
        $store_picture = '';

        if ($requestjson['token'] != '' && !empty($requestjson['token'])){

            $this->load->model('user_model');
            $this->load->model('customer_model');
            $this->load->model('trader_model');

            $trader_id = false;
            $user_id = false;
            //this is here for when a trader completes a task on behalf of a store.
            if (isset($requestjson['store_id']) && !empty($requestjson['store_id'] && $requestjson['store_id']) != ''){
                $user = $this->customer_model->get_user_from_customer_id($requestjson['store_id']);
                $user_id = $user['id'];
                $trader_user_id = $this->user_model->get_user_from_token($requestjson['token']);
                $trader_id = $this->trader_model->get_trader_from_user_id($trader_user_id);
            }else{
                $user_id = $this->user_model->get_user_from_token($requestjson['token']);
            }
            
            if($user_id){

                $user = $this->user_model->get_general_user($user_id);
                $customer_id = $user->user_title_id;

                $error = false;
                $message = '';
                $date = date("Y-m-d H:i:s");
                $task_id = 0;

                if(isset($requestjson['task_id'])){
                    $task_id = $requestjson['task_id'];
                }

                if(isset($requestjson['pos_id']) && $requestjson['pos_id'] != ''){
                    
                    $pos_id = $requestjson['pos_id'];

                    if(isset($requestjson['photo']) && $requestjson['photo'] != ''){

                        $store_picture = 'ps_' . $pos_id . '_' . $user_id.'.jpg';
                        $this->load->model('spazapp_model');
                        $this->spazapp_model->base64_to_jpeg($requestjson['photo'], 'assets/uploads/customer/bc/poses/'.$store_picture);

                        $this->pos_model->store_pos_response($user_id, $pos_id, $store_picture);
                        
                        $date = date("Y-m-d H:i:s");
                        $this->event_model->private_track_event($user_id, 'app', 'brand_connect', 'pos result', $pos_id, $date);

                        $this->task_model->change_task_status('pos', $requestjson['pos_id'], $user_id, 3, $task_id); // Pending Approval

                        $message = [
                            'success' => true, // Automatically generated by the model
                            'data' => array(),
                            'message' => "Thank you for completing this task."
                        ];

                    }else{

                        $message = [
                            'success' => false, // Automatically generated by the model
                            'data' => array(),
                            'message' => "Please make sure you post a picutre."
                        ];

                    }
              }else{

                    $message = [
                        'success' => false, // Automatically generated by the model
                        'data' => array(),
                        'message' => "Please make sure you post a pos_id"
                    ];

                }
                      
            }else{
                    $message = [
                        'success' => false, // Automatically generated by the model
                        'data' => array(),
                        'message' => "Your Token has expired."
                    ];
                }
        }else{
                $message = [
                    'success' => false, // Automatically generated by the model
                    'data' => array(),
                    'message' => "Please post a valid token."
                ];
            }

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

}