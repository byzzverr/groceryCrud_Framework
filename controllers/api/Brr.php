<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
require APPPATH . '/libraries/REST_Controller.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Brr extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();

        $this->load->library("Aauth");
        $this->load->model('event_model');
        $this->load->model('app_model');
        $this->load->model('user_model');
        $this->load->model('fridge_model');

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['user_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['user_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['user_delete']['limit'] = 50; // 50 requests per hour per user/key
    }


    public function register_post()
    {

        $error = false;
        $message = '';

        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        //$user_id = $this->user_model->get_user_from_token($requestjson['token']);
        //turned off for now.
        $rep_id = 0;

        $expected_array = array(
            'fridge_type',
            'fridge_unit_code',
            'location_name',
            'region_id',
            'street'
            );

        foreach ($expected_array as $field) {
            if(!isset($requestjson[$field])){
                $error = true;
                $message = "Could not find '$field' in post array";
            }
        }

        if (!$error){

            // store the raw data for future reference
            $this->app_model->save_raw_data(json_encode($requestjson),'brr_api','register');
           
            $province = $this->user_model->get_province_by_region_id($requestjson['region_id']);
            
            $requestjson['province']        = $province['province_id']; 
            $requestjson['rep_id']          = $rep_id;
            
            if($this->fridge_model->is_fridge_unique($requestjson['fridge_unit_code'])){

                $fridge_id = $this->fridge_model->add_fridge($requestjson);

                if(is_numeric($fridge_id)){

                    $this->event_model->track_event('fridge','add_fridge', 'new fridge registration', $fridge_id);

                    $message = [
                        'success' => true, // Automatically generated by the model
                        'data' => array( 'new_fridge_id' => $fridge_id),
                        'message' => 'Successfully registered fridge.'
                    ];
                }else{

                    $this->event_model->track_event('fridge','add_fridge_failed', 'new fridge registration failed.', $fridge_id);

                    $message = [
                        'success' => true, // Automatically generated by the model
                        'data' => array( 'new_fridge_id' => $fridge_id),
                        'message' => 'fridge_unit_code must be unique.'
                    ];
                }

            }else{

                 $fridge_id = $this->fridge_model->update_fridge($requestjson);

                if($fridge_id){

                    $this->event_model->track_event('fridge','edit_fridge', 'Edit fridge', $fridge_id);

                    $message = [
                        'success' => true, // Automatically generated by the model
                        'data' => array( 'new_fridge_id' => $fridge_id),
                        'message' => 'Successfully updated fridge unit.'
                    ];
                }else{

                    $this->event_model->track_event('fridge','edit_fridge_failed', 'edit fridge failed.', $fridge_id);

                    $message = [
                        'success' => true, // Automatically generated by the model
                        'data' => array(),
                        'message' => 'there was an error.'
                    ];
                }
            }

        }else{
            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => $message
            ];
        }

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code

    }

    public function get_fridge_types_post()
    {

        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        
        $data['fridge_types'] = $this->fridge_model->get_fridge_types();
        
        if(!empty($data['fridge_types']))
        {
            $message = [
            'success' => true, // Automatically generated by the model
            'data' => $data['fridge_types'],
            'message' => "Ok"
            ];  
        }
        else
        {
             $message = [
            'success' => false, // Automatically generated by the model
            'data' => array(),
            'message' => "No fridge types found"
            ];  
        }
            
        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function start_post()
    {
        $error = false;
        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $this->app_model->save_raw_data(json_encode($requestjson),'brr_api','brr_start');


        $expected_array = array(
            'app',
            'imei',
            'fridge_unit_code',
            'long',
            'lat',
            'temp'
            );

        foreach ($expected_array as $field) {
            if(!isset($requestjson[$field])){
                $error = true;
                $message = "Could not find '$field' in post array";
            }
        }


        if(!$error){
            $fridge = $this->fridge_model->get_fridge_from_code($requestjson['fridge_unit_code']);
            if(!$fridge){
                $error = true;
                $message = "Unknown fridge unit code.";
            }else{
                $fridge_id = $fridge['id'];
            }
        }

        if(!$error){
            $user_id = $this->fridge_model->get_user_id_from_imei($requestjson['imei']);
            if(!$user_id){
                /*$error = true;
                $message = "Unknown IMEI.";*/
                $user_id = 0;
            }
        }

        if(!$error){

            //add fridge log
            $log_id = $this->fridge_model->add_fridge_log($requestjson['app'], $fridge_id, $user_id);
            if($log_id){

                $createdate = date("Y-m-d H:i:s");

                if(isset($requestjson['createdate'])){
                    $createdate = $requestjson['createdate'];
                }
                //add fridge temp
                $temp = array('log_id' => $log_id, 'temp' => $requestjson['temp'], 'fridge_id' => $fridge_id, 'user_id' => $user_id, 'createdate' => $createdate);
                $this->fridge_model->add_fridge_temp($temp);
                //add fridge location
                $location = array('log_id' => $log_id, 'long' => $requestjson['long'], 'lat' => $requestjson['lat'], 'fridge_id' => $fridge_id, 'user_id' => $user_id, 'createdate' => $createdate);
                $this->fridge_model->add_fridge_location($location);

                $message = [
                    'success' => true, // Automatically generated by the model
                    'data' => array("log_id" => $log_id)
                ];

            }else{

            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => 'Could not start Sync.'
            ];

            }


        }else{

            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => $message
            ];
        }

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }


  public function continue_post()
    {
        $error = false;
        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $this->app_model->save_raw_data(json_encode($requestjson),'brr_api','brr_continue');

        $expected_array = array(
            'log_id',
            'data'
            );

        foreach ($expected_array as $field) {
            if(!isset($requestjson[$field])){
                $error = true;
                $message = "Could not find '$field' in post array";
            }
        }


        if(!$error){
            $log = $this->fridge_model->get_log_info($requestjson['log_id']);
            if(!$log){
                $error = true;
                $message = "Unknown log id.";
            }else{
                $fridge_id = $log['fridge_id'];
                $user_id = $log['user_id'];
                $log_id = $log['id'];
            }
        }

        if(!$error){
            foreach ($requestjson['data'] as $value) {
                //add fridge temp
                $temp = array('log_id' => $log_id, 'temp' => $value['temp'], 'fridge_id' => $fridge_id, 'user_id' => $user_id, 'createdate' => $value['createdate']);
                $this->fridge_model->add_fridge_temp($temp);
            }

            $message = [
                'success' => true
            ];

        }else{

            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => $message
            ];
        }

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }


}