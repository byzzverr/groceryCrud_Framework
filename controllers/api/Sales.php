<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
require APPPATH . '/libraries/REST_Controller.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Sales extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();

        $this->load->library("Aauth");
		$this->load->model('pos_model');
        $this->load->model('event_model');
        $this->load->model('app_model');
        $this->load->model('financial_model');
        $this->load->model('user_model');
        $this->load->model('task_model');
        $this->load->model('airtime_model');
        $this->load->model('insurance_model');
    }

	public function get_all_airtime_products_post()
    {

        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $auth = $this->input->server('HTTP_AUTHORIZATION');
        if (!empty($auth) && $auth != ''){
            $requestjson['token'] = $auth;
        }

        $this->app_model->save_raw_data(json_encode($requestjson),'api','get_all_airtime_products_post');

        if (isset($requestjson['token']) && !empty($requestjson['token'] && $requestjson['token']) != ''){

            $this->load->model('user_model');
            $user_id = $this->user_model->get_user_from_token($requestjson['token']);
            if($user_id){

                $user = $this->user_model->get_general_user($user_id);
//                $customer_id = $user->customer_id;

                $airtime = $this->airtime_model->get_airtime_vouchers();
                $mobile_data = $this->airtime_model->get_data_vouchers();
                $now = date("Y-m-d H:i:s");

                $data = array();
                $data['pinless_airtime'] = $airtime;
                $data['pinless_data'] = $mobile_data;
                $data['rewards'] = 0;
                $data['balance'] = $this->financial_model->get_wallet_balance($user->username);

				if (empty($data))
				{
					$message = [
					'success' => false,
					'message' => 'No products found.'
					];
				}
				else
				{
					$message = [
					'success' => true,
					'message' => 'Request processed successfully.',
					'products' => $data
					];
				}

            }else{
                $message = [
                    'success' => false, // Automatically generated by the model
                    'data' => array(),
                    'message' => 'Your token does not appear to be valid'
                ];
            }
        }else{
            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => 'Please supply a valid token'
            ];
        }
	$this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
  }

    public function get_pinless_airtime_products_post()
    {

        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $auth = $this->input->server('HTTP_AUTHORIZATION');
            if (!empty($auth) && $auth != ''){
                $requestjson['token'] = $auth;
            }

        $this->app_model->save_raw_data(json_encode($requestjson),'api','get_pinless_airtime_products_post');

        if (isset($requestjson['token']) && !empty($requestjson['token'] && $requestjson['token']) != ''){

            $this->load->model('user_model');
            $user_id = $this->user_model->get_user_from_token($requestjson['token']);
            if($user_id){

                $user = $this->user_model->get_general_user($user_id);

                $airtime = $this->airtime_model->get_airtime_vouchers();
                $now = date("Y-m-d H:i:s");

                $data = array();
                $data['pinless_airtime'] = $airtime;
                $data['rewards'] = 0;
                $data['balance'] = $this->financial_model->get_wallet_balance($user->username);

                if (empty($data['pinless_airtime']))
                {
                    $message = [
                    'success' => false,
                    'message' => 'No products found.'
                    ];
                }
                else
                {
                    $message = [
                    'success' => true,
                    'message' => 'Request processed successfully.',
                    'products' => $data
                    ];
                }

            }else{
                $message = [
                    'success' => false, // Automatically generated by the model
                    'data' => array(),
                    'message' => 'Your token does not appear to be valid'
                ];
            }
        }else{
            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => 'Please supply a valid token'
            ];
        }
    $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
  }

    public function get_pinless_data_products_post()
    {

        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $auth = $this->input->server('HTTP_AUTHORIZATION');
            if (!empty($auth) && $auth != ''){
                $requestjson['token'] = $auth;
            }

        $this->app_model->save_raw_data(json_encode($requestjson),'api','get_pinless_data_products_post');

        if (isset($requestjson['token']) && !empty($requestjson['token'] && $requestjson['token']) != ''){

            $this->load->model('user_model');
            $user_id = $this->user_model->get_user_from_token($requestjson['token']);
            if($user_id){

                $user = $this->user_model->get_general_user($user_id);

                $network = '';
                if(isset($requestjson['network'])){
                    $network = $requestjson['network'];
                }

                $mobile_data = $this->airtime_model->get_data_vouchers($network);
                $now = date("Y-m-d H:i:s");

                $data = array();

                $data['pinless_data'] = $mobile_data;
                $data['rewards'] = 0;
                $data['balance'] = $this->financial_model->get_wallet_balance($user->username);

                if (empty($data))
                {
                    $message = [
                    'success' => false,
                    'message' => 'No products found.'
                    ];
                }
                else
                {
                    $message = [
                    'success' => true,
                    'message' => 'Request processed successfully.',
                    'products' => $data
                    ];
                }

            }else{
                $message = [
                    'success' => false, // Automatically generated by the model
                    'data' => array(),
                    'message' => 'Your token does not appear to be valid'
                ];
            }
        }else{
            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => 'Please supply a valid token'
            ];
        }
    $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
  }

    public function get_eskom_products_post()
    {

        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $auth = $this->input->server('HTTP_AUTHORIZATION');
            if (!empty($auth) && $auth != ''){
                $requestjson['token'] = $auth;
            }

        $this->load->model('user_model');
        $user_id = $this->user_model->get_user_from_token($requestjson['token']);

        if($user_id){

             $user = $this->user_model->get_general_user($user_id);
            
            $now = date("Y-m-d H:i:s");
            $data = array();

            $data['eskom_products'] = array(
                47  =>  "Eskom Direct",
                23  =>  "Municipalities",
                220  =>  "Free Basic"
                );

            $data['eskom_values'] = array(25,30,50,100,200,300,500);

            $data['rewards'] = 0;
            $data['balance'] = $this->financial_model->get_wallet_balance($user->username);

            if (empty($data))
            {
                $message = [
                'success' => false,
                'message' => 'No products found.'
                ];
            }
            else
            {
                $message = [
                'success' => true,
                'message' => 'Request processed successfully.',
                'products' => $data
                ];
            }
        }else{
            $message = [
            'success' => false,
            'message' => 'Token is invalid.'
            ];
        }

    $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
  }

  function query_eskom_post(){

        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        if(isset($requestjson['queryReference'])){

            $this->load->library('Smartcall');
            $api_result = $this->smartcall->query($requestjson['queryReference']);

            $message = [
                'success' => true,
                'data' => $api_result,
                'message' => "See results."
            ];

        }else{
            $message = [
                'success' => false,
                'data' => array(),
                'message' => "Please make sure you send a query reference."
            ];
        }

        $this->set_response($message, REST_Controller::HTTP_CREATED); 

/*124538725*/

  }

 
    public function purchase_eskom_product_post()
    {

        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $auth = $this->input->server('HTTP_AUTHORIZATION');
            if (!empty($auth) && $auth != ''){
                $requestjson['token'] = $auth;
            }

        $user_id = $this->logged_in_user_id;

        $user = $this->user_model->get_general_user($user_id);

        $error = false;
        $message = '';
        $date = date("Y-m-d H:i:s");
        $result = array();
        $order_id = false;

        $this->app_model->save_raw_data(json_encode($requestjson),'api','purchase_eskom_product_post');

        if(isset($requestjson['product_id']) && $requestjson['product_id'] >= 23 && isset($requestjson['value']) && $requestjson['value'] >= 10){
            
            if(isset($requestjson['cell']) && $requestjson['cell'] != '' && isset($requestjson['meter_no']) && $requestjson['meter_no'] != ''){

                $result['result'] = false;

                if($this->financial_model->get_wallet_balance($user->username) >= $requestjson['value']){

                    $msisdn = '27' . substr($requestjson['cell'],-9);
                    $device_id = trim($requestjson['meter_no']);
                    $amount = $requestjson['value'];
                    $order_id = true;

                    $this->load->library('Smartcall');

                    $api_result = $this->smartcall->purchase($requestjson['product_id'], $msisdn, $user_id, $amount, $device_id);

                    if(isset($api_result['responseCode']) && $api_result['responseCode'] == 'SUCCESS'){

                        $order_id = $api_result['recharge']['orderReferenceId'];
                        $this->financial_model->electricity_purchase($user->username, $amount, $order_id);

                        if(isset($api_result['recharge']['balance'])){
                            $balance = $api_result['recharge']['balance'];
                            if($balance <= 550){
                                $this->load->model('comms_model');
                                $sms = "NB!! SMARTCALL Balance Warning: R".$balance .' remaining.';
                                $this->comms_model->send_sms('0827378714', $sms);
                            }
                        }

                        $result['result'] = true;
                    }
                }

                if($order_id && $result['result']){
                    $success = true;
                    $this->event_model->track_event('app', 'eskom_purchased', 'Eskom was purchased through the app', $order_id);
                    $message = "Successful Electricity purchase.";
                    $data = array('order_id'=>$order_id);
                }else{
                    if(!$order_id){
                        $success = false;
                        $this->event_model->track_event('app', 'eskom_purchase_failed', 'Eksom purchase was attempted through the app error: NOFUNDS', '');
                        $message = "Insufficient funds";
                        $data = array();
                    }else{
                        $success = false;
                        $this->event_model->track_event('app', 'eskom_purchase_failed', $api_result['message'], '');
                        $message = 'ERROR: ' . $api_result['message'];
                        $data = array();
                    }
                }

                $data['balance'] = $this->financial_model->get_wallet_balance($user->username);

                $message = [
                    'success' => $success, // Automatically generated by the model
                    'data' => $data,
                    'message' => $message
                ];

            }else{

                $message = [
                    'success' => false, // Automatically generated by the model
                    'data' => array(),
                    'message' => "Please send a cellphone number and meter number."
                ];

            }
        }else{

            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => "Please make sure you send a value and product id."
            ];

        }

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }    

    public function purchase_airtime_product_post()
    {
        $requestjson = file_get_contents('php://input');

        $requestjson = json_decode($requestjson, true);

        $this->app_model->save_raw_data(json_encode($requestjson),'api','purchase_airtime_product_post');

        $auth = $this->input->server('HTTP_AUTHORIZATION');
            if (!empty($auth) && $auth != ''){
                $requestjson['token'] = $auth;
            }

        $user_id = $this->logged_in_user_id;

        $user = $this->user_model->get_general_user($user_id);
//        $customer_id = $user->customer_id;

        $error = false;
        $message = '';
        $date = date("Y-m-d H:i:s");

        if(isset($requestjson['product_id']) && $requestjson['product_id'] != ''){
            
            if(isset($requestjson['amount'],$requestjson['cell']) && $requestjson['cell'] != ''){

                $result = $this->airtime_model->buy_voucher($user_id, $requestjson['product_id'],$requestjson['amount'],$requestjson['cell']);
                //$result = array();
                //$result['refno'] = 'tits';
                //$result['result'] = true;
                $order_id = $result['refno'];

                if($order_id && $result['result']){
                    $success = true;
                    $this->event_model->track_event('app', 'airtime_purchased', 'Airtime was purchased through the app', $order_id);
                    $message = "OK";
                    $data = array('order_id'=>$order_id);
                }else{
                    if(!$order_id){
                        $success = false;
                        $this->event_model->track_event('app', 'airtime_purchase_failed', 'Airtime purchase was attempted through the app error: NOFUNDS', '');
                        $message = "Insufficient funds";
                        $data = array();
                    }else{
                        $success = false;
                        $this->event_model->track_event('app', 'airtime_purchase_failed', $result['message'], '');
                        $message = $result['message'];
                        $data = array();
                    }
                }

                $data['balance'] = $this->financial_model->get_wallet_balance($user->username);

                $message = [
                    'success' => $success, // Automatically generated by the model
                    'data' => $data,
                    'message' => $message
                ];

            }else{

                $message = [
                    'success' => false, // Automatically generated by the model
                    'data' => array(),
                    'message' => "Please send a cellphone number and amount."
                ];

            }
        }else{

            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => "Please make sure you send a product ID."
            ];

        }

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }


    public function get_insurance_funeral_products_post()
    {

            $requestjson = file_get_contents('php://input');
            $requestjson = json_decode($requestjson, true);

            $auth = $this->input->server('HTTP_AUTHORIZATION');
            if (empty($auth) || $auth == ''){
                $auth = $requestjson['token'];
            }

            $this->load->model('user_model');
            $user_id = $this->user_model->get_user_from_token($requestjson['token']);
            if($user_id){

                $user = $this->user_model->get_general_user($user_id);

                $funeral = $this->insurance_model->get_funeral_insurance();
                $now = date("Y-m-d H:i:s");

                $data = array();

                $data['funeral'] = $funeral;
                $data['rewards'] = 0;
                $data['balance'] = $this->financial_model->get_wallet_balance($user->username);

                if (empty($data))
                {
                    $message = [
                    'success' => false,
                    'message' => 'No products found.'
                    ];
                }
                else
                {
                    $message = [
                    'success' => true,
                    'message' => 'Request processed successfully.',
                    'products' => $data
                    ];
                }
            }else{
                $message = [
                'success' => false,
                'message' => 'Token is invalid.'
                ];
            }

    $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
  }

    public function get_ott_values_post()
    {

        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $auth = $this->input->server('HTTP_AUTHORIZATION');
            if (!empty($auth) && $auth != ''){
                $requestjson['token'] = $auth;
            }

        $this->app_model->save_raw_data(json_encode($requestjson),'api','get_ott_values_post');

        if (isset($requestjson['token']) && !empty($requestjson['token'] && $requestjson['token']) != ''){

            $this->load->model('user_model');
            $user_id = $this->user_model->get_user_from_token($requestjson['token']);

            if($user_id){

                $user = $this->user_model->get_general_user($user_id);

                $airtime = $this->airtime_model->get_airtime_vouchers();
                $now = date("Y-m-d H:i:s");

                $data = array();
                $data['ott_values'] = array(5,10,30,50,100,200,300,500,1000);
                $data['rewards'] = 0;
                $data['balance'] = $this->financial_model->get_wallet_balance($user->username);

                if (empty($data['ott_values']))
                {
                    $message = [
                    'success' => false,
                    'message' => 'No products found.'
                    ];
                }
                else
                {
                    $message = [
                    'success' => true,
                    'message' => 'Request processed successfully.',
                    'products' => $data
                    ];
                }

            }else{
                $message = [
                    'success' => false, // Automatically generated by the model
                    'data' => array(),
                    'message' => 'Your token does not appear to be valid'
                ];
            }
        }else{
            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => 'Please supply a valid token'
            ];
        }
    $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
  }


    public function purchase_ott_product_post()
    {
        $requestjson = file_get_contents('php://input');

        $requestjson = json_decode($requestjson, true);

        $this->app_model->save_raw_data(json_encode($requestjson),'api','purchase_ott_product_post');

        $auth = $this->input->server('HTTP_AUTHORIZATION');
            if (!empty($auth) && $auth != ''){
                $requestjson['token'] = $auth;
            }

        $user_id = $this->logged_in_user_id;

        $user = $this->user_model->get_general_user($user_id);

        $error = false;
        $message = '';
        $date = date("Y-m-d H:i:s");
            
        if(isset($requestjson['amount'],$requestjson['cell']) && $requestjson['cell'] != ''){

            $value = $requestjson['amount'];
            $cellphone = $requestjson['cell'];

            $this->load->library('Ott_vouchers');

            $user_array = array(
                    "name" => $user->name, 
                    "id" => $user->id
                    );

            $data['balance'] = $this->financial_model->get_wallet_balance($user->username);
            $order_id = false;
            $paid = false;

            if($data['balance'] >= $value){
                $order_id = true;
                $result = $this->ott_vouchers->purchase($value, $user_array, $cellphone);
                $order_id = $result->unique_reference;
                if($result->error_code == 0){
                    $this->financial_model->ott_purchase($user->username, $value, $order_id);
                }
            }

            if($order_id && $result->error_code == 0){
                $success = true;
                $this->event_model->track_event('app', 'ott_purchased', 'OTT voucher was purchased through the app', $order_id);
                $message = "OK";
                $data = array('order_id'=>$order_id);
            }else{
                if(!$order_id){
                    $success = false;
                    $this->event_model->track_event('app', 'ott_purchase_failed', 'OTT voucher purchase was attempted through the app error: Insufficient Funds.', '');
                    $message = "Insufficient funds";
                    $data = array();
                }else{
                    $success = false;
                    $this->event_model->track_event('app', 'ott_purchase_failed', $result->error_code, '');
                    $message = "ERROR OCCURRED: " .$result->error_code;
                    $data = array();
                }
            }

            $data['balance'] = $this->financial_model->get_wallet_balance($user->username);

            $message = [
                'success' => $success, // Automatically generated by the model
                'data' => $data,
                'message' => $message
            ];

        }else{

            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => "Please send a cellphone number and amount."
            ];

        }

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function redeem_ott_voucher_post()
    {
        $requestjson = file_get_contents('php://input');

        $requestjson = json_decode($requestjson, true);

        $this->app_model->save_raw_data(json_encode($requestjson),'api','redeem_ott_voucher_post');

        $auth = $this->input->server('HTTP_AUTHORIZATION');
            if (!empty($auth) && $auth != ''){
                $requestjson['token'] = $auth;
            }

        $user_id = $this->logged_in_user_id;

        $user = $this->user_model->get_general_user($user_id);

        $error = false;
        $message = '';
        $date = date("Y-m-d H:i:s");
            
        if(isset($requestjson['pin']) && $requestjson['pin'] != ''){

            $pinCode = $requestjson['pin'];

            $this->load->library('Ott_vouchers');

            $user_array = array(
                "name" => $user->name, 
                "id" => $user->id,
                "msisdn" => '27' . substr($user->username,-9),
                "cellphone" => '0' . substr($user->username,-9)
            );

            $result = $this->ott_vouchers->redeem($pinCode, $user_array);

            if($result->error_code == 0){

                $order_id = $result->unique_reference;
                $result_array = array(
                    "value" => $result->value,
                    "unique_reference" => $result->unique_reference,
                    );

                $this->financial_model->ott_redemption($user->username, $result_array);

                $success = true;
                $this->event_model->track_event('app', 'ott_redeemed', 'OTT voucher was redeemed through the app', $order_id);
                $message = "OK";
                $data = array('order_id'=>$order_id);
            }else{

                $success = false;
                $this->event_model->track_event('app', 'ott_redemption_failed', $result->message, '');
                $message = "ERROR OCCURRED: " .$result->message;
                $data = array();
            }

            $data['balance'] = $this->financial_model->get_wallet_balance($user->username);

            $message = [
                'success' => $success, // Automatically generated by the model
                'data' => $data,
                'message' => $message
            ];

        }else{

            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => "Please supply a valid OTT pin code."
            ];

        }

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

}
