<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
require APPPATH . '/libraries/REST_Controller.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Stokvel extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();

        $this->load->library("Aauth");
        $this->load->library("comms_library");
		$this->load->model('pos_model');
        $this->load->model('event_model');
        $this->load->model('app_model');
        $this->load->model('financial_model');
        $this->load->model('user_model');
        $this->load->model('stokvel_model');
        $this->load->model('user_model');
        $this->load->model('comms_model');
    }


    public function get_cats_post()
    {

        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);
        
        $message ='';
        $data = array();
           

        $user_id = $this->user_model->get_user_from_token($requestjson['token']);

        if($user_id)
        {
            $user = $this->user_model->get_general_user($user_id);

            if(!isset($requestjson['cat_id']) || $requestjson['cat_id'] == '')
            {
                $requestjson['cat_id'] = 0;
            }
                  
            $categories = $this->stokvel_model->get_category_list($requestjson['cat_id']);
           
            $data['sub_cats'] = 0;
            foreach($categories as $row)
            {
                if($requestjson['cat_id'] == $row['parent_id']){
                    $data['sub_cats'] = 1;
                }                
            }
           
            $message = [
            'success' => true, // Automatically generated by the model
            'data'    => $categories,
            'message' => "Ok"
            ];

        }
        else
        {
            $message = [
            'success' => false, // Automatically generated by the model
            'data'    => array(),
            'message' => "Token not valid."
            ];
        }      
        
        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function get_products_post()
    {

        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);
        
        $message ='';
        $data = array();
           

        $user_id = $this->user_model->get_user_from_token($requestjson['token']);

        if($user_id)
        {
            $user = $this->user_model->get_general_user($user_id);

            if(!isset($requestjson['cat_id']) || $requestjson['cat_id'] == '')
            {
                $requestjson['cat_id'] = 0;
            }
                  
            $products = $this->stokvel_model->get_category_products($requestjson['cat_id']);
           
            $message = [
            'success' => true, // Automatically generated by the model
            'data'    => $products,
            'message' => "Ok"
            ];

        }
        else
        {
            $message = [
            'success' => false, // Automatically generated by the model
            'data'    => array(),
            'message' => "Token not valid."
            ];
        }      
        
        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }



    public function get_product_post()
    {

        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);
        
        $message ='';
        $data = array();
           

        $user_id = $this->user_model->get_user_from_token($requestjson['token']);

        if($user_id)
        {
            $user = $this->user_model->get_general_user($user_id);
                  
            $products = $this->stokvel_model->get_product($requestjson['product_id']);
           
            $message = [
            'success' => true, // Automatically generated by the model
            'data'    => $products,
            'message' => "Ok"
            ];

        }
        else
        {
            $message = [
            'success' => false, // Automatically generated by the model
            'data'    => array(),
            'message' => "Token not valid."
            ];
        }      
        
        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }
 
     public function get_saved_baskets_post()
    {

        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','get_saved_baskets');
        $requestjson = json_decode($requestjson, true);

        if ($requestjson['stokvel_id'] != '' && !empty($requestjson['stokvel_id'])){

            $user_id = $this->user_model->get_user_from_token($requestjson['token']);

            if($user_id){

                $user = $this->user_model->get_general_user($user_id);

                $customer_id = $user->user_link_id;

                //validate that this user is a member of the stokvel_id that is sent first.
                $result = $this->app_model->get_basket_list($requestjson['stokvel_id'], 'stokvel');

                if($result){

                    $message = [
                    'success' => true, // Order placed successfully
                    'data' => $result,
                    'message' => "Please see saved baskets."
                    ];
                }else{
                    $message = [
                    'success' => true, // no baskets but still successfull call
                    'data' => $result,
                    'message' => 'No saved baskets.'
                    ];
                }
            }else{
                $message = [
                'success' => false, // token not valid
                'data' => array(),
                'message' => "Token not valid."
                ];
            }
        }else{

            $message = [
                'success' => false, // no token found
                'data' => array(),
                'message' => "Please post a valid stokvel_id"
            ];
            
        }        

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function get_saved_basket_post()
    {

        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','get_saved_basket');
        $requestjson = json_decode($requestjson, true);

       // $requestjson['approvals_info'] = $this->stokvel_model->get_stokvel_approvals($user_id,$requestjson['basket_id']);

        
        if(isset($requestjson['stokvel_id'])){

            $user_id = $this->user_model->get_user_from_token($requestjson['token']);

            if($user_id){

                $user = $this->user_model->get_general_user($user_id);
                $customer_id = $user->user_link_id;

                $result = $this->app_model->get_basket($requestjson['basket_id']);
                $result['approvals_info'] = $this->stokvel_model->get_basket_approvals($requestjson['basket_id']);
                if($result){

                    $message = [
                    'success' => true, // Order placed successfully
                    'data' => $result,
                    'message' => "Please see saved basket."
                    ];
                }else{
                    $message = [
                    'success' => false, // order failed.
                    'data' => $result,
                    'message' => "No basket found."
                    ];
                }
            }else{
                $message = [
                'success' => false, // token not valid
                'data' => array(),
                'message' => "Token not valid."
                ];
            }
        }else{

            $message = [
                'success' => false, // no token found
                'data' => array(),
                'message' => "Please post a valid stokvel_id."
            ];
            
        }        

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }


    public function save_basket_post(){

        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);
        $user_id = $this->user_model->get_user_from_token($requestjson['token']);

        if($user_id){

            $user = $this->user_model->get_general_user($user_id);

            if($this->order_model->verify_basket_name($requestjson['basket_name'], $requestjson['stokvel_id'])){

                $user = $this->user_model->get_general_user($user_id);
                $customer_id = $user->user_link_id;

                $result = $this->order_model->insert_stokvel_basket($requestjson['stokvel_id'], $requestjson);

                if($result['status'] == 'success'){

                    $message = [
                    'success' => true, // Order placed successfully
                    'data' => $result,
                    'message' => "Please see order details."
                    ];

                }else{
                    $message = [
                    'success' => false, // order failed.
                    'data' => $result
                    ];
                }
            }else{
                $message = [
                    'success' => false, // no token found
                    'data' => array(),
                    'message' => "You already have a list with this name."
                ];
            }
        }else{
            $message = [
            'success' => false, // token not valid
            'data' => array(),
            'message' => "Token not valid."
            ];
        }
               
        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }


 public function place_basket_order_post(){
        
        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);
    
        $user_id = $this->user_model->get_user_from_token($requestjson['token']);

        if($user_id){

            $user = $this->user_model->get_general_user($user_id);
            $customer_id = $user->user_link_id;
            
            if(isset($requestjson['stokvel_id'])){

                $customer_id = $user->user_link_id;

                $result = $this->order_model->update_stokvel_basket($requestjson['basket_id'], $customer_id, $requestjson);
                $this->stokvel_model->approve_basket_order($requestjson['basket_id'], $user_id);

                //if all seniors have approved or if there is only one senior member place order
                $pending_approvals = $this->stokvel_model->get_basket_approvals($requestjson['basket_id']);

                $have_not_approved = 0;
                foreach ($pending_approvals as $key => $value) {
                    if(!$value['approved']){
                        $have_not_approved++;
                    }
                }

                if($have_not_approved == 0){
                    $result = $this->order_model->place_basket_order($requestjson['basket_id'],$customer_id);
                }else{
                    $this->db->where("id", $requestjson['basket_id']);
                    $this->db->update('basket_orders', array('status_id' => 3));
                    $result = 'Pending Approval.';
                }

                if(isset($result['basket_id'])){

                    $message = [
                    'success' => true, // Order placed successfully
                    'data' => $result,
                    'message' => "Order placed."
                    ];

                }else{
                    $message = [
                    'success' => true, // order failed.
                    'data' => $result,
                    'message' => $result
                    ];
                }
            }else{
                $message = [
                    'success' => false, // no token found
                    'data' => array(),
                    'message' => "Please supply a delivery date."
                ];
            }
        }else{
            $message = [
            'success' => false, // token not valid
            'data' => array(),
            'message' => "Token not valid."
            ];
        }
               
        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }



public function approve_basket_order_post(){

        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $user_id = $this->user_model->get_user_from_token($requestjson['token']);

        $message = [
                    'success' => false, // no token found
                    'data' => array()
                ];

        if($user_id){

            $user = $this->user_model->get_general_user($user_id);
            $customer_id = $user->user_link_id;
            if(isset($requestjson['stokvel_id']) && isset($requestjson['basket_id'])){

                //check if user with cellphone already exists.
                $exists = $this->stokvel_model->check_order_approved($requestjson['basket_id'],$user_id,1);

                if($exists > 0){
                 $message = [
                    'success' => false, // Order placed successfully
                    'message' => "You have already approved this order."
                    ];
                }else{
                    $result = $this->stokvel_model->approve_basket_order($requestjson['basket_id'], $user_id);
                    $approvals = $this->stokvel_model->get_basket_approvals($requestjson['basket_id']);

                    $have_not_approved = 0;
                    foreach ($approvals as $key => $value) {
                        if(!$value['approved']){
                            $have_not_approved++;
                        }
                    }
                    
                    if($have_not_approved == 0){

                        $result = $this->order_model->place_basket_order($requestjson['basket_id'],$customer_id);
                        
                        $message = [
                        'success' => true,
                        'data' => $approvals,
                        'message' => "You were the last approver this order will now be placed."
                        ];

                    }else{
                        $message = [
                        'success' => false, // order failed.
                        'data' => $approvals,
                        'message' => "Thank you for approving this basket."
                        ];
                    }
                }               
                
                
            }else{
                $message = [
                    'success' => false, // no token found
                    'data' => array(),
                    'message' => "Please supply a valid stokvel_id."
                ];
            }
        
               
        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }
}

    public function submit_basket_for_quote_post()
    {
        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','submit_basket_for_quote');
        $requestjson = json_decode($requestjson, true);

        if ($requestjson['token'] != '' && !empty($requestjson['token'])){

            $user_id = $this->user_model->get_user_from_token($requestjson['token']);

            if($user_id){

                $user = $this->user_model->get_general_user($user_id);
                $customer_id = $user->user_link_id;

                $result = $this->order_model->submit_basket_for_quote($requestjson['basket_id']);

                if($result){

                    $message = [
                    'success' => true, // Order placed successfully
                    'data' => $result,
                    'message' => "Basket submitted for quote."
                    ];
                }else{
                    $message = [
                    'success' => false, // order failed.
                    'data' => $result,
                    'message' => "No basket found."
                    ];
                }
            }else{
                $message = [
                'success' => false, // token not valid
                'data' => array(),
                'message' => "Token not valid."
                ];
            }
        }else{

            $message = [
                'success' => false, // no token found
                'data' => array(),
                'message' => "Please post a valid token."
            ];
            
        }        

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function update_basket_post()
    {

        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','update_basket_post');
        $requestjson = json_decode($requestjson, true);

        if (isset($requestjson['stokvel_id'])){

            $user_id = $this->user_model->get_user_from_token($requestjson['token']);

            if($user_id){

                $result = $this->order_model->update_stokvel_basket($requestjson['basket_id'], $requestjson['stokvel_id'], $requestjson);

                if($result){

                    $message = [
                    'success' => true, // Order placed successfully
                    'data' => $result,
                    'message' => "Please see order details."
                    ];
                }else{
                    $message = [
                    'success' => false, // order failed.
                    'data' => $result,
                    'message' => "No basket found."
                    ];
                }
            }else{
                $message = [
                'success' => false, // token not valid
                'data' => array(),
                'message' => "Token not valid."
                ];
            }
        }else{

            $message = [
                'success' => false, // no token found
                'data' => array(),
                'message' => "Please post a valid stokvel_id."
            ];
            
        }        

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function copy_basket_post()
    {
        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','copy_basket_post');
        $requestjson = json_decode($requestjson, true);

        if (isset($requestjson['stokvel_id'])){

            $user_id = $this->user_model->get_user_from_token($requestjson['token']);

            if($user_id){

                $user = $this->user_model->get_general_user($user_id);
                $customer_id = $user->user_link_id;

                $result = $this->order_model->copy_basket($requestjson['basket_id'],$requestjson['basket_name']);

                if($result){

                    $message = [
                    'success' => true, // Order placed successfully
                    'data' => $result,
                    'message' => "Basket coppied."
                    ];
                }else{
                    $message = [
                    'success' => false, // order failed.
                    'data' => $result,
                    'message' => "No basket found."
                    ];
                }
            }else{
                $message = [
                'success' => false, // token not valid
                'data' => array(),
                'message' => "Token not valid."
                ];
            }
        }else{

            $message = [
                'success' => false, // no token found
                'data' => array(),
                'message' => "Please post a valid stokvel_id."
            ];
            
        }        

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function get_distributor_post()
    {
        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','get_distributor_post');
        $requestjson = json_decode($requestjson, true);

        if (isset($requestjson['stokvel_id'])){

            $user_id = $this->user_model->get_user_from_token($requestjson['token']);

            if($user_id){

                $user = $this->user_model->get_general_user($user_id);
                $stokvel_info = $this->stokvel_model->get_stokvel_info($requestjson['stokvel_id']);
 
                $result = $this->app_model->get_distributor_info($stokvel_info['distributor_id']);
 

                if($result){

                    $message = [
                    'success' => true, // Order placed successfully
                    'data' => $result,
                    'message' => "Distributor info."
                    ];
                }else{
                    $message = [
                    'success' => false, // order failed.
                    'data' => $result,
                    'message' => "No distributor found."
                    ];
                }
            }else{
                $message = [
                'success' => false, // token not valid
                'data' => array(),
                'message' => "Token not valid."
                ];
            }
        }else{

            $message = [
                'success' => false, // no token found
                'data' => array(),
                'message' => "Please post a valid stokvel_id."
            ];
            
        }        

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }



 public function get_stokvels_post()
    {
        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','get_stokvels_post');
        $requestjson = json_decode($requestjson, true);

            $user_id = $this->user_model->get_user_from_token($requestjson['token']);

           
            if($user_id){

                $user = $this->user_model->get_general_user($user_id);

                 if(isset($user->user_link['stokvels'])){
                    $result = $user->user_link['stokvels'];
                }

                if($result){

                    $message = [
                    'success' => true, // Order placed successfully
                    'data' => $result,
                    'message' => "Stokvels list."
                    ];
                }else{
                    $message = [
                    'success' => false, // order failed.
                    'data' => $result,
                    'message' => "No Stokvels found."
                    ];
                }
            }else{
                $message = [
                'success' => false, // token not valid
                'data' => array(),
                'message' => "Token not valid."
                ];
            }

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }


    public function get_stokvels_info_post()
    {
        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','get_stokvels_post');
        $requestjson = json_decode($requestjson, true);

            $user_id = $this->user_model->get_user_from_token($requestjson['token']);

        if (isset($requestjson['stokvel_id'])){
            
            if($user_id){

                $user = $this->user_model->get_general_user($user_id);
 

                 if(isset($user_id)){
                    $result = $this->stokvel_model->get_user_stokvel($user_id);
                }

                if($result){

                    $message = [
                    'success' => true, // Order placed successfully
                    'data' => $result,
                    'message' => "Stokvels info."
                    ];
                }else{
                    $message = [
                    'success' => false, // order failed.
                    'data' => $result,
                    'message' => "No Stokvels found."
                    ];
                }
            }else{
                $message = [
                'success' => false, // token not valid
                'data' => array(),
                'message' => "Token not valid."
                ];
            }
        }else{

            $message = [
                'success' => false, // no token found
                'data' => array(),
                'message' => "Please post a valid stokvel_id."
            ];
            
        }



        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function get_stokvel_senior_members_post()
    {
        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','get_stokvel_senior_members_post');
        $requestjson = json_decode($requestjson, true);

            $user_id = $this->user_model->get_user_from_token($requestjson['token']);

        if (isset($requestjson['stokvel_id'])){
            
            if($user_id){

                $user = $this->user_model->get_general_user($user_id);
 

                 if(isset($user_id)){
                    $result = $this->stokvel_model->get_stokvel_seniors($user_id,$requestjson['stokvel_id']);
                }

                if($result){

                    $message = [
                    'success' => true, // Order placed successfully
                    'data' => $result,
                    'message' => "Stokvels info."
                    ];
                }else{
                    $message = [
                    'success' => false, // order failed.
                    'data' => $result,
                    'message' => "No Stokvels found."
                    ];
                }
            }else{
                $message = [
                'success' => false, // token not valid
                'data' => array(),
                'message' => "Token not valid."
                ];
            }
        }else{

            $message = [
                'success' => false, // no token found
                'data' => array(),
                'message' => "Please post a valid stokvel_id."
            ];
            
        }



        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }


  public function add_member_post()
    {

        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','add_member_post');
        $requestjson = json_decode($requestjson, true);

       

            $user_id = $this->user_model->get_user_from_token($requestjson['token']);

            if (isset($requestjson['stokvel_id'])){

                    if($user_id){

                    $user = $this->user_model->get_general_user($user_id);

                    if (isset($requestjson['stokvel_id'])){
                        $stokvel_id = $requestjson['stokvel_id'];

                        if (isset($requestjson['name']) && isset($requestjson['cellphone'])){

                                
                            $requestjson['cellphone'] = '0' . substr($requestjson['cellphone'],-9);
                            $requestjson['password'] = $this->user_model->generateRandomString();
                         
                            /* CREATE USER */
                            //check if user with cellphone already exists.
                            $new_user_array = $this->stokvel_model->check_exist($requestjson['cellphone']);

                            $errors = false;
                            $exist = false;
                            if(!empty($new_user_array)){
                                $new_user_id = $new_user_array['id'];
                                $this->stokvel_model->add_stok_user_rel($new_user_id, $stokvel_id, $requestjson['customer_type']);
                                $exist = true;
                            }else{
                                $exist = false;
                                $new_user_id = $this->aauth->create_user($requestjson['cellphone'],$requestjson['password'],$requestjson['name'],$requestjson['cellphone'],34);
                                
                                $errors = $this->aauth->get_errors_array();

                                if(!$errors){

                                    // user $user and populate prov_city, region_id, province, country_id, 

                                    $requestjson['region_id'] = $user->user_link['region_id'];
                                    $requestjson['province'] = $user->user_link['province'];
                                    $requestjson['user_id'] = $new_user_id;
                                    
                                    $customer_id = $this->stokvel_model->create_customer($requestjson, $stokvel_id);

                                    $this->app_model->update_user_customer($new_user_id,$customer_id);

                                    //if usre already exists. do not create again just do this
                                    // $this->stokvel_model->add_stok_user_rel($data['user_id'], $stokvel_id, $data['customer_type']);
                                }
                            }

                            if(!isset($requestjson['email'])){
                                $requestjson['email'] = $requestjson['cellphone'] . '@umsstokvel.co.za';
                            }

                            if(is_array($errors) && count($errors) >= 1){
                                $this->event_model->track('user','attempted_add_user', $errors[0]);
                                $message = [
                                        'success' => false, // Automatically generated by the model
                                        'data' => array(),
                                        'message' => $errors[0]
                                    ];
                            }else{                     

                                if(valid_email($requestjson['email'])){
                                    $this->app_model->update_user_email($new_user_id,$requestjson['email']);
                                }

                                $this->app_model->send_welcome($requestjson['email'],$requestjson['name'],$requestjson['cellphone'],$requestjson['cellphone'],$requestjson['password']);

                                $this->event_model->track('user','add_stokvel_user', $new_user_id);

                                if($exist){
                                    $message = [
                                    'success' => true, // Automatically generated by the model
                                    'data' => array( 'new_user_id' => $new_user_id),
                                    'message' => 'Successfully added.'
                                ];
                                }else{
                                    $message = [
                                    'success' => true, // Automatically generated by the model
                                    'data' => array( 'new_user_id' => $new_user_id),
                                    'message' => 'Successfully added.'
                                ];
                                }
                                
                            }


                        }else{
                            $message = [
                                'success' => false, // Automatically generated by the model
                                'data' => array(),
                                'message' => 'Please supply name and cellphone.'
                            ];
                        }

                    }else{
                        $message = [
                            'success' => false, // Automatically generated by the model
                            'data' => array(),
                            'message' => 'Please supply a valid stokvel_id.'
                        ];
                    }
                }else{
                        $message = [
                            'success' => false, // Automatically generated by the model
                            'data' => array(),
                            'message' => 'No user could be found.'
                        ];
                    }
            }else{
                $message = [
                    'success' => false, // Automatically generated by the model
                    'data' => array(),
                    'message' => 'Please supply a valid token.'
                ];
            }

    
            

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

  public function update_stokvel_member_post()
    {

        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','update_stokvel_member_post');
        $requestjson = json_decode($requestjson, true);

        if (isset($requestjson['stokvel_id'])){

            $user_id = $this->user_model->get_user_from_token($requestjson['token']);

            if($user_id){

                $user = $this->user_model->get_general_user($user_id);
                $stokvel_id = $requestjson['stokvel_id'];

                if (isset($requestjson['member_id']) && isset($requestjson['cellphone'])){

                    // store the raw data for future reference
                    $this->app_model->save_raw_data(json_encode($requestjson),'api','update_member');
                        
                    $update['cellphone'] = '0' . substr($requestjson['cellphone'],-9);
                    $update['username'] = $update['cellphone'];
                    $update['name'] = $requestjson['name'];
                 
                    if(!isset($requestjson['email'])){
                        $update['email'] = $requestjson['cellphone'] . '@umsstokvel.co.za';
                    }

                    $member = $this->user_model->get_general_user($requestjson['member_id']);

                    $this->stokvel_model->change_user_stokvel_rel($requestjson['member_id'],$requestjson['customer_type'], $stokvel_id);
                    $this->user_model->update_user($requestjson['member_id'], $update);

                    $message = [
                        'success' => true, // Automatically generated by the model
                        'data' => array( 'user_id' => $requestjson['member_id']),
                        'message' => 'Successfully updated.'
                    ];

                }else{
                    $message = [
                        'success' => false, // Automatically generated by the model
                        'data' => array(),
                        'message' => 'Please supply name and cellphone.'
                    ];
                }
            }else{
                    $message = [
                        'success' => false, // Automatically generated by the model
                        'data' => array(),
                        'message' => 'No user could be found.'
                    ];
                }
        }else{
            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => 'Please supply a valid stokvel_id.'
            ];
        }

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }


  public function remove_stokvel_member_post()
    {

        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','remove_stokvel_member');
        $requestjson = json_decode($requestjson, true);

        if (isset($requestjson['stokvel_id'])){

            $user_id = $this->user_model->get_user_from_token($requestjson['token']);

            if($user_id){

                $user = $this->user_model->get_general_user($user_id);
                $stokvel_id = $requestjson['stokvel_id'];

                if (isset($requestjson['member_id'])){
                       
                    $this->stokvel_model->remove_member($requestjson['member_id'], $stokvel_id);

                    $message = [
                        'success' => true, // Automatically generated by the model
                        'data' => array( 'removed_user' => $requestjson['member_id']),
                        'message' => 'Successfully removed user.'
                    ];

                }else{
                    $message = [
                        'success' => false, // Automatically generated by the model
                        'data' => array(),
                        'message' => 'Please suppli member_id'
                    ];
                }
            }else{
                    $message = [
                        'success' => false, // Automatically generated by the model
                        'data' => array(),
                        'message' => 'No user could be found.'
                    ];
                }
        }else{
            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => 'Please supply a valid stokvel_id.'
            ];
        }

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }


  public function get_stokvel_members_post()
    {
        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','get_stokvel_members');
        $requestjson = json_decode($requestjson, true);

        if (isset($requestjson['stokvel_id'])){

            $user_id = $this->user_model->get_user_from_token($requestjson['token']);

            if($user_id){

                $user = $this->user_model->get_general_user($user_id);
                $stokvel_id = $requestjson['stokvel_id'];

                  
                $users = $this->stokvel_model->get_stokvel_members($stokvel_id, $user_id);

                $message = [
                    'success' => true, // Automatically generated by the model
                    'data' => $users,
                    'message' => 'Please see members.'
                ];

            }else{
                    $message = [
                        'success' => false, // Automatically generated by the model
                        'data' => array(),
                        'message' => 'No user could be found.'
                    ];
                }
        }else{
            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => 'Please supply a valid stokvel_id.'
            ];
        }

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

  public function get_stokvel_info_post()
    {
        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','get_stokvel_info_post');
        $requestjson = json_decode($requestjson, true);

        if (isset($requestjson['stokvel_id'])){

            $user_id = $this->user_model->get_user_from_token($requestjson['token']);

            if($user_id){
                 
                $stokvel = $this->stokvel_model->get_stokvel_info($requestjson['stokvel_id']);

                $message = [
                    'success' => true, // Automatically generated by the model
                    'data' => $users,
                    'message' => 'Please see members.'
                ];

            }else{
                    $message = [
                        'success' => false, // Automatically generated by the model
                        'data' => array(),
                        'message' => 'No user could be found.'
                    ];
                }
        }else{
            $message = [
                'success' => false,
                'data' => array(),
                'message' => 'Please supply a valid stokvel_id.'
            ];
        }

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

  public function update_profile_post()
    {

        $this->load->helper('email');

        $error = false;
        $message = '';

        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $expected_array = array(
            'name',
            'cellphone',
            'password',
            'confirm_password',
            'stokvel_name',
            'customer_type',
            'province_id',
            'region_id',
            'token',
            'email',
            'photo',
            'distributor_id'
            );

        $accepted_array = array();
        $rejected_array = array();

        foreach ($requestjson as $key => $field) {
            if(in_array($key, $expected_array)){
                $accepted_array[$key] = $field;
            }else{
                $error = true;
                $rejected_array[] = $key;
                $message = 'Please correct the rejected array.';
            }
        }

        $user_id = $this->user_model->get_user_from_token($requestjson['token']);

        if(!$user_id){
            $error = true;
            $message = "Please supply a valid token.";
        }

        if (!$error){

            $user = $this->user_model->get_general_user($user_id);

            // store the raw data for future reference
            $this->app_model->save_raw_data(json_encode($requestjson),'api','stokvel_update');
                
            $this->load->model('user_model');
            $this->load->model('stokvel_model');
            if(isset($requestjson['cellphone'])){
                $requestjson['cellphone'] = '0' . substr($requestjson['cellphone'],-9);
                $user_update['name'] = $requestjson['cellphone'];
            }
         
            /* UPDATE USER */

            if (isset($requestjson['password'])) {
                $this->aauth->update_password($user_id, $requestjson['password']);
            }

            if(valid_email($requestjson['email'])){
                $this->app_model->update_user_email($user_id,$requestjson['email']);
            }

            $user_update['name'] = $requestjson['name'];

            $this->user_model->update_user_banned($user_update, $user->username);

            if(isset($requestjson['province_id'])){
                $requestjson['province'] = $requestjson['province_id'];
            }
            
            if(isset($requestjson['stokvel_name'])){
                $this->stokvel_model->update_stokvel($user->user_link_id ,$requestjson);
            }

            $this->event_model->track('user','updated_user', $user_id);

            $message = [
                'success' => true, // Automatically generated by the model
                'data' => array( 'user_id' => $user_id),
                'message' => 'Successfully updated profile.'
            ];


        }else{

            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array('illegal_array' => $rejected_array, 'expected_array' => $expected_array),
                'message' => $message
            ];
        }

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    function get_recipes_post(){
        $message = '';
        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $data = $this->stokvel_model->get_recipies();

        $message = [
            'success' => true, // Automatically generated by the model
            'data' => $data,
            'message' => 'Ok.'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    function get_recipe_post(){
        $message = '';
        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $data = $this->stokvel_model->get_recipe($requestjson['recipe_id']);

        $message = [
            'success' => true, // Automatically generated by the model
            'data' => $data,
            'message' => 'Ok.'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    function get_free_contents_post(){
        $message = '';
        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $data = $this->stokvel_model->get_free_contents();

        $message = [
            'success' => true, // Automatically generated by the model
            'data' => $data,
            'message' => 'Ok.'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    function get_free_content_post(){
        $message = '';
        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $data = $this->stokvel_model->get_free_content($requestjson['free_content_id']);

        $message = [
            'success' => true, // Automatically generated by the model
            'data' => $data,
            'message' => 'Ok.'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    
    function get_magazines_post(){
        $message = '';
        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $data = $this->stokvel_model->get_magazines();

        $message = [
            'success' => true, // Automatically generated by the model
            'data' => $data,
            'message' => 'Ok.'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    function get_magazine_post(){
        $message = '';
        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $data = $this->stokvel_model->get_magazine($requestjson['magazine_id']);

        $message = [
            'success' => true, // Automatically generated by the model
            'data' => $data,
            'message' => 'Ok.'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    function get_better_stokvels_post(){
        $message = '';
        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $data = $this->stokvel_model->get_better_stokvels();

        $message = [
            'success' => true, // Automatically generated by the model
            'data' => $data,
            'message' => 'Ok.'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    function get_better_stokvel_post(){
        $message = '';
        $requestjson = file_get_contents('php://input');
        $requestjson = json_decode($requestjson, true);

        $data = $this->stokvel_model->get_better_stokvel($requestjson['better_stokvel_id']);

        $message = [
            'success' => true, // Automatically generated by the model
            'data' => $data,
            'message' => 'Ok.'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    function send_message_post(){
        $message='';
        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','send_message_post');
        $requestjson = json_decode($requestjson, true);
        $requestjson['comm_id'] = 45;//Sms comm as default.
        $data['sms_remaining'] = 0;
        if ($requestjson['token'] != '' && !empty($requestjson['token'])){
            $user_id = $this->user_model->get_user_from_token($requestjson['token']);
            $user_info = $this->user_model->get_user($user_id);
            if($user_info->user_link_id){
                $count = count($this->stokvel_model->get_message_count($requestjson['stokvel_id'], $user_id));
                $data['sms_remaining'] = $count;
                if($count < 4){
                    $success = $this->stokvel_model->send_comms($requestjson['stokvel_id'], $requestjson, $user_info->id);
                    if($success){
                        $message="Message successfully sent.";
                    }else{
                        $message="Oops something went wrong.";
                    }
                    $message = [
                        'success' => true, // Automatically generated by the model
                        'data' => $data,
                        'message' => $message
                    ];
                }else{
                    $message = [
                        'success' => false, // Automatically generated by the model
                        'data' => $data,
                        'message' => "You have already sent more than 4 messages"
                    ];
                }
               
            }else{
                $message = [
                    'success' => false, // Automatically generated by the model
                    'data' => array(),
                    'message' => 'No user could be found.'
                ];
            }

        }else{
            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => 'Please supply a valid token.'
            ];
        }

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function promotions_post()
    {
        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','promotions');
        $requestjson = json_decode($requestjson, true);
        $stokvel = $this->stokvel_model->get_stokvel_info($requestjson['stokvel_id']);
        $distributor_id = $stokvel['distributor_id'];
        $promotions = $this->stokvel_model->get_promotions($requestjson['category'], $distributor_id);
        $message = [
            'success' => true, // Automatically generated by the model
            'data' => array('promotions' => $promotions, 'count' => count($promotions)),
            'message' => 'generated list of promotions with count'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function events_post()
    {
        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','events_post');
        $requestjson = json_decode($requestjson, true);
        $stokvel = $this->stokvel_model->get_stokvel_info($requestjson['stokvel_id']);
        $distributor_id = $stokvel['distributor_id'];
        $events = $this->stokvel_model->get_events($distributor_id);
        $message = [
            'success' => true, // Automatically generated by the model
            'data' => array('events' => $events, 'count' => count($events)),
            'message' => 'generated list of events with count'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function free_stuff_post()
    {
        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','free_stuff_post');
        $requestjson = json_decode($requestjson, true);
        $stokvel = $this->stokvel_model->get_stokvel_info($requestjson['stokvel_id']);
        $distributor_id = $stokvel['distributor_id'];
        $events = $this->stokvel_model->get_free_stuff($distributor_id);
        $message = [
            'success' => true, // Automatically generated by the model
            'data' => array('events' => $events, 'count' => count($events)),
            'message' => 'generated list of events with count'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    function event_rsvp_post(){
        $message='';
        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','event_rsvp');
        $requestjson = json_decode($requestjson, true);

        if ($requestjson['token'] != '' && !empty($requestjson['token'])){
            $user_id = $this->user_model->get_user_from_token($requestjson['token']);
            $user_info = $this->user_model->get_user($user_id);

            if ($requestjson['event_id'] != '' && !empty($requestjson['event_id'])){

                $success = $this->stokvel_model->add_event_rsvp($user_id, $requestjson['event_id'], $requestjson['guest_count']);

                $message = [
                    'success' => true, // Automatically generated by the model
                    'data' => array(),
                    'message' => "Thank you for the RSVP!"
                ];
               
            }else{
                $message = [
                    'success' => false, // Automatically generated by the model
                    'data' => array(),
                    'message' => 'Please supply an event_id.'
                ];
            }

        }else{
            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => 'Please supply a valid token.'
            ];
        }

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    function add_new_stokvel_post(){

        $message='';
        $requestjson = file_get_contents('php://input');
        $this->app_model->save_raw_data($requestjson,'api','add_new_stokvel');
        $requestjson = json_decode($requestjson, true);

        if ($requestjson['token'] != '' && !empty($requestjson['token'])){
            $user_id = $this->user_model->get_user_from_token($requestjson['token']);
            $user_info = $this->user_model->get_user($user_id);

            if ($requestjson['name'] != '' && !empty($requestjson['name'])){

		$requestjson['stokvel_name'] = $requestjson['name'];

                $stokvel_id = $this->stokvel_model->create_stokvel($requestjson);
                $this->stokvel_model->add_stok_user_rel($user_id, $stokvel_id, $requestjson['customer_type']);

                $message = [
                    'success' => true, // Automatically generated by the model
                    'data' => array(),
                    'message' => "New stokvel created!"
                ];
               
            }else{
                $message = [
                    'success' => false, // Automatically generated by the model
                    'data' => array(),
                    'message' => 'Please supply a stokvel name.'
                ];
            }

        }else{
            $message = [
                'success' => false, // Automatically generated by the model
                'data' => array(),
                'message' => 'Please supply a valid token.'
            ];
        }

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }
}
